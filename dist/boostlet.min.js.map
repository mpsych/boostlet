{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,MAAM;IAEX,OAAO,mBAAmB;QAExB,IAAI,cAAY;QAEhB,IAAI,KAAK,WAAW,OAAO,KAEzB,cAAY,IAAI,CAAA,GAAA,aAAK,EAAE,OAAO;aAEzB,IAAI,KAAK,WAAW,OAAO,SAEhC,cAAY,IAAI,CAAA,GAAA,aAAK,EAAE,OAAO;aAEzB,IAAI,KAAK,WAAW,OAAO,cAEhC,cAAY,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;aAEhC,IAAI,KAAK,WAAW,OAAO,gBAEhC,cAAY,IAAI,CAAA,GAAA,oBAAY,EAAE,OAAO;QAIvC,sDAAsD;QAEtD,OAAO;IAET;IAEA,aAAa,YAAY,GAAG,EAAE,QAAQ,EAAE;QAEtC,iDAAiD;QACjD,OAAO,OAAO,eAAe,OAAO,OAAO,WAAW,UAAU;YAC9D;gBACE,OAAO;YACT;YACA,KAAI,WAAS;gBACX,aAAa;YACf;QACF;QAEA,MAAM,SAAS,OAAO,SAAS,cAAc;QAC7C,OAAO,OAAO;QACd,OAAO,MAAM;QAEb,IAAI,KAAK,WAAW,WAClB,OAAO,SAAS;QAGlB,OAAO,SAAS,KAAK,YAAY;QACjC,KAAK;IAEP;IAEA,aAAa,eAAe,KAAG,EAAE,MAAI,EAAE,UAAQ,EAAE;QAE/C,IAAI,QAAM,IAAI;QACd,MAAI,KAAK,QAAQ;QACjB,MAAI,qBAAqB;YACvB,IAAI,MAAI,eAAe,GAAG;gBACxB,eAAe;gBACf,WAAU,MAAI;gBAEd;YAEF;QACF;QAEA,MAAI,KAAK;IAEX;IAEA,OAAO,eAAe,YAAU,EAAE,OAAK,EAAE,QAAM,EAAE,MAAI,EAAE;QAErD,4CAA4C;QAC5C,IAAI,cAAY,OAAO,SAAS,cAAc;QAC9C,YAAU,QAAQ;QAClB,YAAU,SAAS;QAEnB,IAAI,kBAAgB,YAAU,WAAW;QAEzC,IAAI,YAAU,gBAAc,gBAAgB,YAAU,OAAO,YAAU;QACvE,IAAI,WAAS,UAAQ;QAErB,IAAK,IAAI,MAAG,GAAG,MAAE,SAAO,QAAO,MAE7B,QAAM,CAAC,IAAE,GAAG,YAAU,CAAC,IAAE;QAGzB,8BAA8B;QAChC,gBAAc,aAAa,WAAS,GAAG;QAGvC,IAAI,QAAM;YAER,gBAAc;YACd,gBAAc,MAAM,GAAG,KAAK,kBAAkB;YAC9C,gBAAc,UAAU,aAAW,GAAG,CAAC;YACvC,gBAAc;QAEhB;QAEA,IAAI,WAAS,YAAU,UAAU;QAEjC,gCAAgC;QAChC,mDAAmD;QACnD,sBAAsB;QACtB,8BAA8B;QAC9B,gBAAgB;QAEhB,WAAS,SAAO,QAAQ,0BAAyB;QAEjD,IAAI,cAAY,WAAW,KAAK,KAAK,WAAS,CAAC,MAAM,IAAE,WAAW;QAElE,OAAO;IAET;IAEA,OAAO,OAAO,QAAM,EAAE,OAAK,EAAE,QAAM,EAAE,QAAM,EAAE;QAE3C,MAAM,eAAa,KAAK,KAAK,SAAO;QACpC,MAAM,mBAAiB,KAAK,MAAM,eAAa;QAE/C,MAAM,eAAa,SAAO;QAE1B,IAAK,IAAI,MAAI,GAAG,MAAI,UAAQ,MAC1B,IAAK,IAAI,MAAI,GAAG,MAAI,SAAO,MAAK;YAC9B,MAAM,aAAW,MAAI,UAAQ;YAE7B,IAAI,aAAW;YACf,IAAK,IAAI,OAAK,GAAG,OAAK,cAAY,OAChC,IAAK,IAAI,OAAK,GAAG,OAAK,cAAY,OAAM;gBACtC,MAAM,SAAO,MAAI,OAAK;gBACtB,MAAM,SAAO,MAAI,OAAK;gBACtB,MAAM,aAAW,SAAO,UAAQ;gBAEhC,MAAM,gBAAc,QAAM,CAAC,OAAK,eAAa,KAAG;gBAChD,cAAY,QAAM,CAAC,WAAS,GAAG;YACjC;YAGF,YAAU,CAAC,WAAS,GAAG;QAEzB;QAGF,OAAO;IAET;IAEA,OAAO,kBAAkB,WAAS,EAAE;QAElC,MAAM,SAAO,IAAI,WAAW,YAAU,SAAS;QAE/C,IAAK,IAAI,MAAI,GAAG,MAAI,YAAU,QAAQ,MAAK;YACzC,MAAM,MAAI,WAAS,CAAC,IAAE;YACtB,MAAM,UAAQ,MAAI;YAElB,MAAI,CAAC,QAAM,GAAG;YACd,MAAI,CAAC,UAAQ,EAAE,GAAG;YAClB,MAAI,CAAC,UAAQ,EAAE,GAAG;YAClB,MAAI,CAAC,UAAQ,EAAE,GAAG;QACpB;QAEA,OAAO;IAET;IAEA,OAAO,kBAAkB,MAAI,EAAE;QAE7B,MAAM,cAAY,IAAI,WAAW,OAAK,SAAS;QAE/C,IAAK,IAAI,MAAI,GAAG,MAAI,OAAK,QAAQ,OAAK,EAEpC,WAAS,CAAC,MAAI,EAAE,GAAG,MAAI,CAAC,IAAE;QAI5B,OAAO;IAET;IAEA;;;;;;;;;IASE,GACF,OAAO,YAAY,QAAM,EAAE,MAAI,EAAE,WAAS,EAAE;QAE1C,8JAA8J;QAC9J,qDAAqD;QACrD,uBAAuB;QAGvB,IAAI,eAAa;YAAC;YAAG;YAAK;YAAK;SAAI;QAEnC,IAAI,KAAK,WAAW,cAElB,eAAa;QAIf,IAAK,IAAI,MAAI,GAAG,MAAI,OAAK,QAAQ,MAE/B,IAAI,MAAI,CAAC,IAAE,GAAG,KAAK;YACjB,QAAM,CAAC,IAAI,MAAI,EAAE,GAAG,YAAU,CAAC,EAAE;YACjC,QAAM,CAAC,IAAI,MAAI,EAAE,GAAG,YAAU,CAAC,EAAE;YACjC,QAAM,CAAC,IAAI,MAAI,EAAE,GAAG,YAAU,CAAC,EAAE;YACjC,QAAM,CAAC,IAAI,MAAI,EAAE,GAAG,YAAU,CAAC,EAAE;QACnC;QAIF,OAAO;IAET;IAEA,OAAO,WAAW,UAAQ,EAAE;QAE1B,OAAQ,OAAO,cAAY;IAE7B;AAEF;;;;;;;;ACxOO,MAAM;IAEX,YAAY,QAAQ,CAAE;QAEpB,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,WAAW;QAEhB,IAAI,CAAC,cAAc;IAErB;IAEA,UAAU,WAAW,EAAE;QAErB,MAAM;IAER;IAEA,UAAU,UAAU,EAAE;QAEpB,MAAM;IAER;IAEA,SAAS,QAAQ,EAAE;QAEjB,MAAM;IAER;IAEA,WAAW,QAAQ,EAAE;QAEnB,MAAM;IAER;IAEA,eAAe,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;QAExC,OAAO,CAAA,GAAA,WAAG,EAAE,eAAe,YAAY,OAAO,QAAQ,IAAI,CAAC;IAE7D;AAEF;;;;;;;;;;;ACvCO,MAAM,kDAAsB,CAAA,GAAA,gBAAQ;IAEzC,YAAY,QAAQ,CAAE;QAEpB,KAAK,CAAC;QACN,IAAI,CAAC,OAAO;QAEZ,IAAI,CAAC,4BAA4B;QAEjC,IAAI,OAAO,OAAO,oBAAoB,aAEpC,+BAA+B;QAC/B,IAAI,CAAC,4BAA4B,OAAO;QAI1C,IAAI,CAAC,cAAc;IAErB;IAEA,UAAU,WAAW,EAAE;QAErB,IAAI,UAAU,IAAI,CAAC,SAAS,oBAAoB,CAAC,EAAE;QACnD,IAAI,SAAS;QACb,IAAI,SAAQ;QACZ,IAAI,UAAS;QAEb,IAAI,OAAO,eAAe,aAAa;YAErC,8CAA8C;YAC9C,yCAAyC;YAEzC,IAAI,SAAS,QAAQ;YACrB,SAAQ,OAAO;YACf,UAAS,OAAO;YAEhB,IAAK,MAAM,OAAO,WAAW;YAE7B,IAAI,YAAY,IAAI,aAAa,GAAG,GAAG,QAAO;YAC9C,SAAS,UAAU;QAErB,OAAO;YAEL,oCAAoC;YACpC,IAAI,YAAY,QAAQ;YACxB,SAAS,UAAU;YACnB,SAAQ,UAAU;YAClB,UAAS,UAAU;QAErB;QAEA,OAAO;YAAC,QAAO;YAAQ,SAAQ;YAAO,UAAS;QAAM;IAEvD;IAEA,UAAU,UAAU,EAAE;QAEpB,IAAI,UAAU,IAAI,CAAC,SAAS,oBAAoB,CAAC,EAAE;QACnD,IAAI,SAAS,QAAQ,MAAM;QAE3B,2BAA2B;QAC3B,OAAO,IAAI;QAEX,8BAA8B;QAC9B,YAAY,qBAAqB,SAAS;IAE5C;IAEA,SAAS,QAAQ,EAAE;QAEjB,sDAAsD;QACtD,mBAAmB;QACnB,0CAA0C;QAE1C,IAAI,UAAU,IAAI,CAAC,SAAS,oBAAoB,CAAC,EAAE;QAEnD,IAAI,SAAS,QAAQ;QACrB,QAAQ,OAAO;QACf,SAAS,OAAO;QAEhB,IAAI,MAAM,OAAO,WAAW;QAE5B,IAAI,YAAY,IAAI,aAAa,GAAG,GAAG,OAAO;QAC9C,IAAI,SAAS,UAAU;QAEvB,IAAI,eAAe,CAAA,GAAA,WAAG,EAAE,YAAY,QAAQ;QAE5C,IAAI,4BAA4B,IAAI,UAAU,cAAc,OAAO;QAEnE,IAAI,aAAa,2BAA2B,GAAG;IAEjD;IAEA,WAAW,QAAQ,EAAE;QAEnB,IAAI,CAAC,0BAA0B,cAAc,gBAAgB;YAAE,iBAAiB;QAAE;QAElF,IAAI,UAAU,IAAI,CAAC,SAAS,oBAAoB,CAAC,EAAE;QACnD,IAAI,SAAS,QAAQ;QAErB,OAAO,YAAY,CAAA;YAEjB,IAAI,QAAQ,IAAI,CAAC,0BAA0B,sCAAsC;YAEjF,IAAI,UAAU,KAAK,CAAC,OAAO,KAAK,OAAO,MAAM,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,QAAQ;YAC3E,IAAI,cAAc,KAAK,CAAC,OAAO,KAAK,OAAO,MAAM,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,QAAQ;YAE/E,IAAI,YAAY,IAAI,CAAC,SAAS,cAAc,QAAQ,SAAS;YAC7D,IAAI,gBAAgB,IAAI,CAAC,SAAS,cAAc,QAAQ,SAAS;YAEjE,IAAI,CAAC,0BAA0B,eAAe,QAAQ,SAAS;YAC/D,IAAI,CAAC,SAAS,qBAAqB,SAAS;YAE5C,SAAS,WAAW;QAEtB,CAAA,EAAE,KAAK,IAAI;IAEb;AAEF;;;;;;;;;;;ACvHO,MAAM,kDAAe,CAAA,GAAA,gBAAQ;IAElC,YAAY,QAAQ,CAAE;QAEpB,KAAK,CAAC;QACN,IAAI,CAAC,OAAO;QAEZ,IAAI,CAAC,cAAc;QAEnB,IAAI,CAAC,cAAc;QACnB,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,KAAK;QACV,IAAI,CAAC,KAAK;IAEZ;IAEA,UAAU,WAAW,EAAE;QAErB,IAAI,UAAU,IAAI,CAAC,SAAS;QAC5B,IAAI,SAAS;QACb,IAAI,QAAQ;QACZ,IAAI,SAAS;QAGb,8CAA8C;QAC9C,yCAAyC;QAEzC,IAAI,qBAAqB,IAAI,CAAC,SAAS,KAAK;QAC5C,IAAI,qBAAqB,IAAI,CAAC,SAAS,KAAK;QAE5C,IAAI,CAAC,SAAS,kBAAkB;YAAC;YAAE;YAAE;YAAE;SAAE;QACzC,IAAI,CAAC,SAAS,KAAK,iBAAe;QAClC,IAAI,CAAC,SAAS;QAGd,IAAI,MAAM,IAAI,CAAC,SAAS;QAGxB,QAAQ,IAAI;QACZ,SAAS,IAAI;QAEb,SAAS,IAAI,WAAW,QAAQ,SAAS;QACzC,IAAI,WACF,GACA,GACA,OACA,QACA,IAAI,MACJ,IAAI,eACJ;QAEF,qBAAqB;QACrB,IAAI,CAAC,SAAS,kBAAkB;QAChC,IAAI,CAAC,SAAS,KAAK,iBAAiB;QAEpC,IAAI,CAAC,CAAA,GAAA,WAAG,EAAE,WAAW,cAEnB,mCAAmC;QACnC,SAAS,CAAA,GAAA,WAAG,EAAE,kBAAkB;QAelC,OAAO;YAAC,QAAO;YAAQ,SAAQ;YAAO,UAAS;QAAM;IAEvD;IAEA;;;;IAIE,GACF,UAAU,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE;QAEtC,iEAAiE;QACjE,oBAAoB;QACpB,uBAAuB;QACvB,cAAc;QACd,gBAAgB;QAEhB,IAAI,iBAAiB,IAAI,CAAC,SAAS;QAEnC,IAAI,YAAY,OAAO,SAAS,cAAc;QAC9C,UAAU,QAAQ,eAAe;QACjC,UAAU,SAAS,eAAe;QAElC,sBAAsB;QACtB,IAAI,MAAM,UAAU,WAAW;QAE/B,IAAI,kBAAkB;QAEtB,IAAI,CAAA,GAAA,WAAG,EAAE,WAAW,UAElB,kBAAkB;aAIlB,kBAAkB,CAAA,GAAA,WAAG,EAAE,kBAAkB;QAK3C,IAAI,qBAAqB,IAAI,kBAAkB;QAE/C,IAAI,iBAAiB,IAAI,UAAU,oBAAoB,UAAU,OAAO,UAAU;QAGlF,IAAI,aAAa,gBAAgB,GAAG;QAEpC,IAAI,CAAC,CAAA,GAAA,WAAG,EAAE,WAAW,UAAU;YAC7B,uBAAuB;YACvB,IAAI;YACJ,IAAI,MAAM,GAAG;YACb,IAAI,UAAU,WAAW,GAAG,CAAC,UAAU;YACvC,IAAI;QACN;QAGA,UAAU,UAAU;YAElB,0CAA0C;YAC1C,UAAU,WAAW,aAAa,gBAAgB;QAEpD;QAEA,iCAAiC;QACjC,eAAe,WAAW,aAAa,WAAW;IAGpD;IAEA,SAAS,QAAQ,EAAE;QAEjB,qBAAqB;QACrB,gDAAgD;QAEhD,IAAI,QAAQ,IAAI,CAAC,UAAU;QAE3B,yDAAyD;QACzD,uDAAuD;QACvD,uBAAuB;QACvB,IAAI,iBAAiB,IAAI,CAAC,SAAS;QAEnC,IAAI,YAAY,OAAO,SAAS,cAAc;QAC9C,UAAU,QAAQ,eAAe;QACjC,UAAU,SAAS,eAAe;QAClC,sBAAsB;QACtB,IAAI,MAAM,UAAU,WAAW;QAC/B,IAAI,eAAe,IAAI,kBAAkB,MAAM;QAC/C,IAAI,YAAY,IAAI,UAAU,cAAc,MAAM,OAAO,MAAM;QAC/D,IAAI,aAAa,WAAW,GAAG;QAC/B,IAAI;QACJ,IAAI,MAAM,GAAG;QACb,IAAI,UAAU,WAAW,GAAG,CAAC,UAAU;QACvC,IAAI;QACJ,QAAQ,IAAI,aAAa,GAAG,GAAG,UAAU,OAAO,UAAU;QAC1D,cAAc;QAEd,IAAI,eAAe,CAAA,GAAA,WAAG,EAAE,YAAY,MAAM,MAAM;QAEhD,IAAI,CAAC,UAAU,cAAc,MAAM,OAAO,qBAAqB;IAGjE;IAEA,WAAW,QAAQ,EAAE;QAEnB,mDAAmD;QAEnD,IAAI,SAAS,IAAI,CAAC,SAAS;QAG3B,OAAO,iBAAiB,aAAa,CAAA,SAAU,CAAC;YAC9C,IAAI,CAAC,cAAc;YAEnB,IAAI,OAAO,EAAE,cAAc,yBAC3B,UAAU,EAAE,UAAU,KAAK,MAC3B,UAAU,EAAE,UAAU,KAAK;YAE3B,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,KAAK;QACZ,CAAA,EAAE,KAAK,IAAI;QAEX,OAAO,iBAAiB,aAAa,CAAA,SAAU,CAAC;YAC9C,IAAI,IAAI,CAAC,aAAa;gBAEpB,IAAI,OAAO,EAAE,cAAc,yBAC3B,UAAU,EAAE,UAAU,KAAK,MAC3B,UAAU,EAAE,UAAU,KAAK;gBAE3B,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,SAAS,iBAAiB;oBAAC,IAAI,CAAC;oBAAI,IAAI,CAAC;oBAAI,IAAI,CAAC,KAAG,IAAI,CAAC;oBAAI,IAAI,CAAC,KAAG,IAAI,CAAC;iBAAG;YACrF;QACF,CAAA,EAAE,KAAK,IAAI;QAGX,OAAO,iBAAiB,WAAW,CAAA,SAAU,CAAC;YAC5C,IAAI,OAAO,EAAE,cAAc,yBAC3B,UAAU,EAAE,UAAU,KAAK,MAC3B,UAAU,EAAE,UAAU,KAAK;YAE3B,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,cAAc;YAEnB,IAAI,UAAU;gBAAC,GAAG,IAAI,CAAC;gBAAI,GAAG,IAAI,CAAC;YAAE;YACrC,IAAI,cAAc;gBAAC,GAAG,IAAI,CAAC;gBAAI,GAAG,IAAI,CAAC;YAAE;YAEzC,SAAS,SAAS;QAEpB,CAAA,EAAE,KAAK,IAAI;IAEb;AAEF;;;;;;;;;;;AClOO,MAAM,gDAAsB,CAAA,GAAA,gBAAQ;IACvC,YAAY,QAAQ,CAAE;QAClB,KAAK,CAAC;QACN,IAAI,CAAC,OAAO;IAEhB;IAEA,UAAU,WAAW,EAAE;QAGnB,2DAA2D;QAC3D,IAAI,SAAS,OAAO,OAAO,QAAQ,CAAC,EAAE;QACtC,IAAI,MAAM,OAAO,WAAW;QAE5B,IAAI,SAAQ,IAAI,aAAa,GAAG,GAAG,OAAO,OAAO,OAAO;QACxD,IAAI,aAAa,CAAA,GAAA,WAAG,EAAE,kBAAkB,OAAM;QAE9C,OAAO;YAAC,QAAO;YAAY,SAAQ,OAAM;YAAO,UAAS,OAAM;QAAM;IAEzE;IAEA,UAAU,UAAU,EAAE;QAElB,IAAI,SAAS,OAAO,OAAO,QAAQ,CAAC,EAAE;QACtC,IAAI,MAAM,OAAO,WAAW;QAC5B,IAAI,YAAY,IAAI,UAAU,IAAI,kBAAkB,CAAA,GAAA,WAAG,EAAE,kBAAkB,cAAc,MAAM,OAAO,MAAM;QAE5G,IAAI,aAAa,WAAW,GAAG;IAEnC;IAEA,SAAS,QAAQ,EAAE,CAEnB;IAEA,WAAW,QAAQ,EAAE,CAErB;AAEJ;;;;;;;;AEvCO,MAAM;IAEX,aAAc;QAEZ,IAAI,CAAC,YAAY;IAEnB;IAEA;;;;;;;;;GASC,GACD,KAAK,IAAI,EAAE,QAAQ,EAAE;QAEnB,IAAI,OAAO,QAAQ,eAAe,OAAO,YAAY,aAAa;YAEhE,QAAQ,IAAI;YACZ,MAAM;QACN,OAAO;QAET,OAEE,IAAI,CAAC,YAAY,CAAA,GAAA,WAAG,EAAE;QAIxB,IAAI,IAAI,CAAC,WAEP,QAAQ,IAAI,SAAS,IAAI,CAAC,WAAW;aAIrC,MAAM;IAIV;IAEA;;GAEC,GACD,MAAM,WAAW,QAAQ,EAAE;QAEzB,IAAI,CAAC,UAAU,WAAW;IAE5B;IAEA;;GAEC,GACD,MAAM,YAAY,OAAO,EAAE;QAEzB,MAAM;IAER;IAEA;;GAEC,GACD,MAAM,YAAY,GAAG,EAAE,QAAQ,EAAE;QAE/B,CAAA,GAAA,WAAG,EAAE,YAAY,KAAK;IAExB;IAEA;;GAEC,GACD,MAAM,eAAe,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QAExC,CAAA,GAAA,WAAG,EAAE,eAAe,KAAK,MAAM;IAEjC;IAEA;;;;;GAKC,GACD,UAAU,WAAW,EAAE;QAErB,OAAO,IAAI,CAAC,UAAU,UAAU;IAElC;IAEA;;;GAGC,GACD,UAAU,UAAU,EAAE;QAEpB,OAAO,IAAI,CAAC,UAAU,UAAU;IAElC;IAEA;;;GAGC,GACD,SAAS,QAAQ,EAAE;QAEjB,OAAO,IAAI,CAAC,UAAU,SAAS;IAEjC;IAEA;;GAEC,GACD,eAAe,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;QAExC,OAAO,IAAI,CAAC,UAAU,eAAe,YAAY,OAAO;IAE1D;IAEA,OAAO,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE;QAEpC,OAAO,CAAA,GAAA,WAAG,EAAE,OAAO,QAAQ,OAAO,QAAQ;IAE5C;AAEF;;;ADhIA,OAAO,QAAQ,IAAI;AAEnB,yDAAyD;AACzD,2DAA2D;AAC3D,OAAO,WAAW,IAAI,CAAA,GAAA,wCAAO","sources":["src/util.js","src/framework.js","src/frameworks/cornerstone2d.js","src/frameworks/niivue.js","src/frameworks/openseadragon.js","src/index.js","src/boostlet.js"],"sourcesContent":["import {Framework} from './framework.js';\nimport {Cornerstone2D} from './frameworks/cornerstone2d.js';\nimport {NiiVue} from './frameworks/niivue.js';\nimport { OpenSeaDragon } from './frameworks/openseadragon.js';\n\nexport class Util {\n  \n  static detect_framework() {\n\n    let framework = null;\n\n    if (Util.is_defined(window.nv)) {\n    \n      framework = new NiiVue(window.nv);\n    \n    } else if (Util.is_defined(window.niivue)) {\n      \n      framework = new NiiVue(window.niivue);\n\n    } else if (Util.is_defined(window.cornerstone)) {\n\n      framework = new Cornerstone2D(window.cornerstone);\n\n    } else if (Util.is_defined(window.OpenSeadragon)) {\n\n      framework = new OpenSeaDragon(window.OpenSeadragon);\n      \n    }\n\n    // TODO: fallback to general canvas or webgl framework\n\n    return framework;\n\n  }\n\n  static async load_script(url, callback) {\n\n    // introducing hack to make it work for openneuro\n    window.Object.defineProperty(window.Object.prototype, 'global', {\n      get( ){\n        return window;\n      },\n      set(newGlobal) {\n        globalThis = newGlobal;\n      }\n    });\n\n    const script = window.document.createElement(\"script\")\n    script.type = \"text/javascript\"\n    script.src = url;\n\n    if (Util.is_defined(callback)) {\n      script.onload = callback;\n    }\n\n    window.document.head.appendChild(script);\n    eval(script);\n\n  }\n\n  static async send_http_post(url, data, callback) {\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url);\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        // request done\n        callback( xhr.response );\n\n        return;\n\n      }\n    }\n\n    xhr.send(data)\n\n  }\n\n  static convert_to_png(uint8array, width, height, flip) {\n\n    // we are using an offscreen canvas for this\n    let offscreen = window.document.createElement('canvas');\n    offscreen.width = width;\n    offscreen.height = height;\n\n    let offscreen_ctx = offscreen.getContext('2d');\n\n    let imgdata = offscreen_ctx.createImageData(offscreen.width, offscreen.height);\n    let pxdata = imgdata.data;\n\n    for (var i =0; i<pxdata.length;i++) {\n        \n      pxdata[i] = uint8array[i];\n\n    }\n      // update canvas with new data\n    offscreen_ctx.putImageData(imgdata, 0, 0);\n    \n\n    if (flip) {\n\n      offscreen_ctx.save();\n      offscreen_ctx.scale(1, -1); // Flip vertically\n      offscreen_ctx.drawImage(offscreen, 0, -height); \n      offscreen_ctx.restore();\n\n    }\n\n    let base64 = offscreen.toDataURL('image/png');\n\n    // for debugging, download image\n    // const link = window.document.createElement(\"a\");\n    // link.href = base64;\n    // link.download = 'test.png';\n    // link.click();\n\n    base64 = base64.replace(\"data:image/png;base64,\",\"\");\n\n    let pngpixels = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n\n    return pngpixels;\n\n  }\n\n  static filter(pixels, width, height, kernel) {\n\n    const kernelSize = Math.sqrt(kernel.length);\n    const halfKernelSize = Math.floor(kernelSize / 2);\n\n    const new_pixels = pixels.slice();\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const dstIndex = y * width + x;\n\n        let newValue = 0;\n        for (let ky = 0; ky < kernelSize; ky++) {\n          for (let kx = 0; kx < kernelSize; kx++) {\n            const srcX = x + kx - halfKernelSize;\n            const srcY = y + ky - halfKernelSize;\n            const srcIndex = srcY * width + srcX;\n\n            const kernelValue = kernel[ky * kernelSize + kx];\n            newValue += pixels[srcIndex] * kernelValue;\n          }\n        }\n\n        new_pixels[dstIndex] = newValue;\n\n      }\n    }\n\n    return new_pixels;\n\n  }\n\n  static grayscale_to_rgba(grayscale) {\n\n    const rgba = new Uint8Array(grayscale.length * 4);\n\n    for (let i = 0; i < grayscale.length; i++) {\n      const g = grayscale[i];\n      const index = i * 4;\n\n      rgba[index] = g;\n      rgba[index + 1] = g;\n      rgba[index + 2] = g;\n      rgba[index + 3] = 255; \n    }\n\n    return rgba;\n\n  }\n\n  static rgba_to_grayscale(rgba) {\n\n    const grayscale = new Uint8Array(rgba.length / 4);\n\n    for (let i = 0; i < rgba.length; i += 4) {\n\n      grayscale[i / 4] = rgba[i];\n\n    }\n\n    return grayscale;\n\n  }\n\n  /**\n   * Harden a mask into a grayscale pixel array.\n   * \n   * pixels needs to be RGBA\n   * \n   * and mask binary.\n   * \n   * maskcolor is optional and falls back to blue.\n   * \n   **/\n  static harden_mask(pixels, mask, maskcolor) {\n\n    // Modified from: https://github.com/facebookresearch/segment-anything/blob/40df6e4046d8b07ab8c4519e083408289eb43032/demo/src/components/helpers/maskUtils.tsx\n    // Copyright (c) Meta Platforms, Inc. and affiliates.\n    // All rights reserved.\n\n\n    let maskcolor_ = [0, 114, 189, 255];\n\n    if (Util.is_defined(maskcolor)) {\n      \n      maskcolor_ = maskcolor;\n      \n    } \n\n    for (var i = 0; i < mask.length; i++) {\n\n      if (mask[i] > 0.0) {\n        pixels[4 * i + 0] = maskcolor_[0];\n        pixels[4 * i + 1] = maskcolor_[1];\n        pixels[4 * i + 2] = maskcolor_[2];\n        pixels[4 * i + 3] = maskcolor_[3];\n      }\n\n    }\n\n    return pixels;\n\n  }\n\n  static is_defined(variable) {\n\n    return (typeof variable != 'undefined');\n\n  }\n\n}","import {Util} from './util.js';\n\nexport class Framework {\n\n  constructor(instance) {\n\n    this.name = 'generic';\n    this.instance = instance;\n\n    this.flip_on_png = false;\n\n  }\n\n  get_image(from_canvas) {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n  set_image(new_pixels) {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n  set_mask(new_mask) {\n\n    throw \"Missing Implementation.\";\n    \n  }\n\n  select_box(callback) {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n  convert_to_png(uint8array, width, height) {\n\n    return Util.convert_to_png(uint8array, width, height, this.flip_on_png);\n\n  }\n\n}\n","import {Framework} from '../framework.js';\n\nimport {Util} from '../util.js';\n\nexport class Cornerstone2D extends Framework {\n  \n  constructor(instance) {\n\n    super(instance);\n    this.name = 'cornerstone2D';\n\n    this.cornerstonetools_instance = null;\n\n    if (typeof window.cornerstoneTools != 'undefined') {\n\n      // TODO probably not too robust\n      this.cornerstonetools_instance = window.cornerstoneTools;\n\n    }\n\n    this.flip_on_png = false;\n\n  }\n\n  get_image(from_canvas) {\n\n    let element = this.instance.getEnabledElements()[0];\n    let pixels = null;\n    let width = null;\n    let height = null;\n\n    if (typeof from_canvas != 'undefined') {\n\n      // TODO this is hacky going through the canvas\n      // later should grab the real volume data\n\n      let canvas = element.canvas;\n      width = canvas.width;\n      height = canvas.height;\n\n      let  ctx = canvas.getContext('2d');\n\n      let imagedata = ctx.getImageData(0, 0, width, height);\n      pixels = imagedata.data;\n\n    } else {\n\n      // this is the real image slice data\n      let imagedata = element.image;\n      pixels = imagedata.getPixelData();\n      width = imagedata.width;\n      height = imagedata.height;\n\n    }\n\n    return {'data':pixels, 'width':width, 'height':height};\n\n  }\n\n  set_image(new_pixels) {\n\n    let element = this.instance.getEnabledElements()[0];\n    let pixels = element.image.getPixelData();\n\n    // Set the new pixel values\n    pixels.set(new_pixels);\n\n    // Re-render the current slice\n    cornerstone.renderGrayscaleImage(element, true);\n\n  }\n\n  set_mask(new_mask) {\n\n    // TODO this needs to use segmentation/labelmap layers\n    // from cornerstone\n    // right now, this is modifying the canvas\n\n    let element = this.instance.getEnabledElements()[0];\n\n    let canvas = element.canvas;\n    width = canvas.width;\n    height = canvas.height;\n\n    let ctx = canvas.getContext('2d');\n\n    let imagedata = ctx.getImageData(0, 0, width, height);\n    let pixels = imagedata.data;\n\n    let masked_image = Util.harden_mask(pixels, new_mask);\n\n    let masked_image_as_imagedata = new ImageData(masked_image, width, height);\n\n    ctx.putImageData(masked_image_as_imagedata, 0, 0);\n    \n  }\n\n  select_box(callback) {\n\n    this.cornerstonetools_instance.setToolActive('RectangleRoi', { mouseButtonMask: 1 })\n\n    let element = this.instance.getEnabledElements()[0];\n    let canvas = element.canvas;\n\n    canvas.onmouseup = function() {\n\n      let state = this.cornerstonetools_instance.globalImageIdSpecificToolStateManager.saveToolState();\n\n      let topleft = state[Object.keys(state).pop()].RectangleRoi.data[0].handles.start;\n      let bottomright = state[Object.keys(state).pop()].RectangleRoi.data[0].handles.end;\n\n      let topleft_c = this.instance.pixelToCanvas(element.element, topleft);\n      let bottomright_c = this.instance.pixelToCanvas(element.element, bottomright);\n\n      this.cornerstonetools_instance.clearToolState(element.element, 'RectangleRoi');\n      this.instance.renderGrayscaleImage(element, true);\n\n      callback(topleft_c, bottomright_c);\n\n    }.bind(this);\n\n  }\n\n}\n","import {Framework} from '../framework.js';\n\nimport {Util} from '../util.js';\n\nexport class NiiVue extends Framework {\n  \n  constructor(instance) {\n\n    super(instance);\n    this.name = 'niivue';\n\n    this.flip_on_png = true;\n\n    this.onMouseDown = false;\n    this.x1 = null;\n    this.y1 = null;\n    this.x2 = null;\n    this.y2 = null;\n\n  }\n\n  get_image(from_canvas) {\n\n    let element = this.instance.canvas;\n    let pixels = null;\n    let width = null;\n    let height = null;\n\n\n    // TODO this is hacky going through the canvas\n    // later should grab the real volume data\n\n    let old_crosshaircolor = this.instance.opts.crosshairColor;\n    let old_crosshairwidth = this.instance.opts.crosshairWidth;\n\n    this.instance.setCrosshairColor([0,0,0,0]);\n    this.instance.opts.crosshairWidth=0;\n    this.instance.updateGLVolume();\n\n\n    let ctx = this.instance.gl;\n\n    \n    width = ctx.drawingBufferWidth;\n    height = ctx.drawingBufferHeight;\n\n    pixels = new Uint8Array(width * height * 4);\n    ctx.readPixels(\n      0, \n      0, \n      width, \n      height, \n      ctx.RGBA, \n      ctx.UNSIGNED_BYTE, \n      pixels);\n\n    // restore crosshairs\n    this.instance.setCrosshairColor(old_crosshaircolor);\n    this.instance.opts.crosshairWidth = old_crosshairwidth;\n\n    if (!Util.is_defined(from_canvas)) {\n\n      // convert rgba pixels to grayscale\n      pixels = Util.rgba_to_grayscale(pixels);\n\n    } else {\n\n      // TODO\n      // not easily possible yet\n      // we could hack it using \n      // nv.back.get_value(x,y,z)\n      // based on the dimensions\n      // nv.back.dims.slice(1);\n      // but devs promised easy access in the future\n\n    }\n\n\n    return {'data':pixels, 'width':width, 'height':height};\n\n  }\n\n  /**\n   * Sets the NiiVue.js image.\n   * \n   * If is_rgba==true, we do *not* convert to RGBA before setting on canvas.\n   **/\n  set_image(new_pixels, is_rgba, no_flip) {\n\n    // TODO this is hacky since we dont work with the real volume yet\n    // create new canvas\n    // put pixels on canvas\n    // show canvas\n    // hide on click\n\n    let originalcanvas = this.instance.canvas;\n\n    let newcanvas = window.document.createElement('canvas');\n    newcanvas.width = originalcanvas.width;\n    newcanvas.height = originalcanvas.height;\n\n    // put new_pixels down\n    let ctx = newcanvas.getContext('2d');\n\n    let new_pixels_rgba = null;\n\n    if (Util.is_defined(is_rgba)) {\n\n      new_pixels_rgba = new_pixels;\n\n    } else {\n\n      new_pixels_rgba = Util.grayscale_to_rgba(new_pixels);\n\n\n    }\n\n    let new_pixels_clamped = new Uint8ClampedArray(new_pixels_rgba);\n\n    let new_image_data = new ImageData(new_pixels_clamped, newcanvas.width, newcanvas.height);\n    \n\n    ctx.putImageData(new_image_data, 0, 0);\n\n    if (!Util.is_defined(no_flip)) {\n      // some flipping action\n      ctx.save();\n      ctx.scale(1, -1);\n      ctx.drawImage(newcanvas, 0, -newcanvas.height);\n      ctx.restore();\n    }\n\n\n    newcanvas.onclick = function() {\n\n      // on click, we will restore the nv canvas\n      newcanvas.parentNode.replaceChild(originalcanvas, newcanvas);\n\n    }\n\n    // replace nv canvas with new one\n    originalcanvas.parentNode.replaceChild(newcanvas, originalcanvas);\n\n\n  }\n\n  set_mask(new_mask) {\n\n    // merge image + mask\n    // and then call set_image with that information\n\n    let image = this.get_image(true);\n\n    // TODO here we need to flip one more time, this is until\n    // we use the official niivue infrastructure for adding\n    // a segmentation layer\n    let originalcanvas = this.instance.canvas;\n\n    let newcanvas = window.document.createElement('canvas');\n    newcanvas.width = originalcanvas.width;\n    newcanvas.height = originalcanvas.height;\n    // put new_pixels down\n    let ctx = newcanvas.getContext('2d');\n    let imageclamped = new Uint8ClampedArray(image.data);\n    let imagedata = new ImageData(imageclamped, image.width, image.height);\n    ctx.putImageData(imagedata, 0, 0);\n    ctx.save();\n    ctx.scale(1, -1);\n    ctx.drawImage(newcanvas, 0, -newcanvas.height);\n    ctx.restore();\n    image = ctx.getImageData(0, 0, newcanvas.width, newcanvas.height);\n    // end of flip\n\n    let masked_image = Util.harden_mask(image.data, new_mask);\n\n    this.set_image(masked_image, true, true); // rgba data, no flip\n\n\n  }\n\n  select_box(callback) {\n\n    // TODO also hacky until official API supports this\n\n    let canvas = this.instance.canvas;\n\n\n    canvas.addEventListener('mousedown', function (e) {\n      this.isMouseDown = true;\n\n      var rect = e.currentTarget.getBoundingClientRect(),\n      offsetX = e.clientX - rect.left,\n      offsetY = e.clientY - rect.top;\n\n      this.x1 = offsetX;\n      this.y1 = offsetY;\n    }.bind(this));\n\n    canvas.addEventListener('mousemove', function (e) {\n      if (this.isMouseDown) {\n\n        var rect = e.currentTarget.getBoundingClientRect(),\n        offsetX = e.clientX - rect.left,\n        offsetY = e.clientY - rect.top;\n\n        this.x2 = offsetX;\n        this.y2 = offsetY;\n        this.instance.drawSelectionBox([this.x1, this.y1, this.x2-this.x1, this.y2-this.y1]);\n      }\n    }.bind(this));\n\n\n    canvas.addEventListener('mouseup', function (e) {\n      var rect = e.currentTarget.getBoundingClientRect(),\n      offsetX = e.clientX - rect.left,\n      offsetY = e.clientY - rect.top;\n      \n      this.x2 = offsetX;\n      this.y2 = offsetY;\n      this.isMouseDown = false;\n\n      let topleft = {x: this.x1, y: this.y1};\n      let bottomright = {x: this.x2, y: this.y2};\n\n      callback(topleft, bottomright);\n\n    }.bind(this));\n\n  }\n\n}\n","import {Framework} from '../framework.js';\n\nimport {Util} from '../util.js';\n\nexport class OpenSeaDragon extends Framework {\n    constructor(instance) {\n        super(instance);\n        this.name = 'opensedragon';\n\n    }\n\n    get_image(from_canvas) {\n    \n\n        // TODO needs to be generic and executed with Boostlet.init\n        let canvas = viewer.canvas.children[0];\n        let ctx = canvas.getContext(\"2d\");\n\n        let image = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        let rgba_image = Util.rgba_to_grayscale(image.data);\n\n        return {'data':rgba_image, 'width':image.width, 'height':image.height};\n\n    }\n\n    set_image(new_pixels) {\n\n        let canvas = viewer.canvas.children[0];\n        let ctx = canvas.getContext(\"2d\");\n        let new_image = new ImageData(new Uint8ClampedArray(Util.grayscale_to_rgba(new_pixels)), image.width, image.height);\n\n        ctx.putImageData(new_image, 0, 0);\n\n    }\n\n    set_mask(new_mask) {\n\n    }\n\n    select_box(callback) {\n\n    }\n\n}\n  ","\nimport {Boostlet} from \"./boostlet.js\"\n\nwindow.console.log('BOOSTLET VERSION 0.1-alpha');\n\n// register global namespace with a new boostlet instance\n// later we might want to support multiple active boostlets\nwindow.Boostlet = new Boostlet();\n","import {Util} from './util.js';\n\nimport {Framework} from './framework.js';\n\nexport class Boostlet {\n\n  constructor() {\n\n    this.framework = null;\n\n  }\n\n  /**\n   * Initializes the Boostlet.\n   * \n   * This includes several steps such as identifying the \n   * visualization/rendering framework that is available. \n   * \n   * TODO: Later we want to have fallbacks in place if the framework\n   * is not detected.\n   * \n   */\n  init(name, instance) {\n\n    if (typeof name != 'undefined' && typeof instance != 'undefined') {\n\n      console.log('Framework forced by user!');\n      throw \"Forced Framework Not Implemented.\";\n      // TODO\n\n    } else {\n\n      this.framework = Util.detect_framework();\n\n    }\n\n    if (this.framework) {\n\n      console.log('Found', this.framework, '!')\n    \n    } else {\n\n      throw \"Framework Not Found.\";\n\n    }\n\n  }\n\n  /**\n   * Let's the user select a region of interest box.\n   */\n  async select_box(callback) {\n\n    this.framework.select_box(callback);\n\n  }\n\n  /**\n   * Let's the user select (multiple) seeds.\n   */\n  async select_seed(howmany) {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n  /**\n   * Loads an external javascript file asynchronously. \n   */\n  async load_script(url, callback) {\n\n    Util.load_script(url, callback);\n\n  }\n\n  /**\n   * Sends a HTTP POST request to a url with some data.\n   */\n  async send_http_post(url, data, callback) {\n\n    Util.send_http_post(url, data, callback);\n\n  }\n\n  /**\n   * Gets the current image (2D).\n   * \n   * TODO: Optional bounding box should be supported.\n   * \n   */\n  get_image(from_canvas) {\n\n    return this.framework.get_image(from_canvas);\n\n  }\n\n  /**\n   * Sets the current image (2D).\n   * \n   */\n  set_image(new_pixels) {\n\n    return this.framework.set_image(new_pixels);\n\n  }\n\n  /**\n   * Sets the current mask (2D).\n   * \n   */\n  set_mask(new_mask) {\n\n    return this.framework.set_mask(new_mask);\n\n  }\n\n  /**\n   * Encode raw image data to PNG.\n   */\n  convert_to_png(uint8array, width, height) {\n\n    return this.framework.convert_to_png(uint8array, width, height);\n\n  }\n\n  filter(pixels, width, height, kernel) {\n\n    return Util.filter(pixels, width, height, kernel);\n\n  }\n\n}\n"],"names":[],"version":3,"file":"boostlet.min.js.map"}